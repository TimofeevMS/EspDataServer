@{
    ViewData["Title"] = "График по дате";
}
<h2>График температуры и влажности</h2>

<div class="mb-3">
    <div class="form-check form-check-inline">
        <input class="form-check-input" type="radio" name="mode" id="dayMode" value="day" checked>
        <label class="form-check-label" for="dayMode">Режим дня</label>
    </div>
    <div class="form-check form-check-inline">
        <input class="form-check-input" type="radio" name="mode" id="rangeMode" value="range">
        <label class="form-check-label" for="rangeMode">Режим периода</label>
    </div>
</div>

<div id="dayControls" class="mb-3 row">
    <div class="col-md-3">
        <label>Дата</label>
        <input type="date" id="dayPicker" class="form-control" value="@DateTime.UtcNow.ToString("yyyy-MM-dd")">
    </div>
    <div class="col-md-3">
        <label>Интервал</label>
        <select id="interval" class="form-control">
            <option value="1">1 минута</option>
            <option value="5" selected>5 минут</option>
            <option value="30">30 минут</option>
            <option value="60">60 минут</option>
        </select>
    </div>
</div>

<div id="rangeControls" class="mb-3 row" style="display: none;">
    <div class="col-md-3">
        <label>Начало</label>
        <input type="datetime-local" id="startDateTime" class="form-control" value="@DateTime.UtcNow.AddHours(-24).ToString("yyyy-MM-ddTHH:mm")">
    </div>
    <div class="col-md-3">
        <label>Конец</label>
        <input type="datetime-local" id="endDateTime" class="form-control" value="@DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm")">
    </div>
</div>

<canvas id="chart" width="800" height="400"></canvas>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let chart;
    let updateInterval;

    async function loadGraph() {
        let url;
        const mode = document.querySelector('input[name="mode"]:checked').value;

        if (mode === 'day') {
            const date = document.getElementById('dayPicker').value;
            const interval = document.getElementById('interval').value;
            url = `/api/data/bydate?date=${date}&interval=${interval}`;
        } else {
            const start = document.getElementById('startDateTime').value;
            const end = document.getElementById('endDateTime').value;
            url = `/api/data/byrange?start=${start}&end=${end}`;
        }

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();

            const labels = data.map(x => new Date(x.timestamp).toLocaleString());
            const temperatures = data.map(x => x.temperature);
            const humidities = data.map(x => x.humidity);

            if (!chart) {
                chart = new Chart(document.getElementById('chart'), {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Температура (°C)',
                                data: temperatures,
                                borderColor: 'red',
                                fill: false
                            },
                            {
                                label: 'Влажность (%)',
                                data: humidities,
                                borderColor: 'blue',
                                fill: false
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        animation: false,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            } else {
                chart.data.labels = labels;
                chart.data.datasets[0].data = temperatures;
                chart.data.datasets[1].data = humidities;
                chart.update();
            }
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }

    function toggleControls() {
        const mode = document.querySelector('input[name="mode"]:checked').value;
        document.getElementById('dayControls').style.display = mode === 'day' ? 'flex' : 'none';
        document.getElementById('rangeControls').style.display = mode === 'range' ? 'flex' : 'none';
        clearInterval(updateInterval);
        updateInterval = setInterval(loadGraph, 2000);
        loadGraph();
    }

    document.querySelectorAll('input[name="mode"]').forEach(radio => {
        radio.addEventListener('change', toggleControls);
    });

    document.getElementById('dayPicker').addEventListener('change', () => {
        clearInterval(updateInterval);
        updateInterval = setInterval(loadGraph, 2000);
        loadGraph();
    });

    document.getElementById('interval').addEventListener('change', () => {
        clearInterval(updateInterval);
        updateInterval = setInterval(loadGraph, 2000);
        loadGraph();
    });

    document.getElementById('startDateTime').addEventListener('change', () => {
        clearInterval(updateInterval);
        updateInterval = setInterval(loadGraph, 2000);
        loadGraph();
    });

    document.getElementById('endDateTime').addEventListener('change', () => {
        clearInterval(updateInterval);
        updateInterval = setInterval(loadGraph, 2000);
        loadGraph();
    });

    window.onload = () => {
        updateInterval = setInterval(loadGraph, 2000);
        toggleControls();
    };

    window.onunload = () => {
        clearInterval(updateInterval);
    };
</script>