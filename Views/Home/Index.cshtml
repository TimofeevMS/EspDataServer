@{
    ViewData["Title"] = "График температуры и влажности";
}
<h2>График температуры и влажности</h2>

<div class="mb-3 row">
    <div class="col-md-3">
        <label>Начало периода</label>
        <input type="datetime-local" id="startDateTime" class="form-control" value="@DateTime.UtcNow.AddHours(-24).ToString("yyyy-MM-ddTHH:mm")">
    </div>
    <div class="col-md-3">
        <label>Конец периода</label>
        <input type="datetime-local" id="endDateTime" class="form-control" value="@DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm")">
    </div>
    <div class="col-md-3">
        <label>Интервал</label>
        <select id="interval" class="form-control">
            <option value="0">Без агрегации</option>
            <option value="1">1 минута</option>
            <option value="5" selected>5 минут</option>
            <option value="30">30 минут</option>
            <option value="60">60 минут</option>
        </select>
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <button id="autoUpdateBtn" class="btn btn-primary">Включить автообновление</button>
    </div>
</div>

<canvas id="chart" width="800" height="400"></canvas>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let chart;
    let autoUpdateInterval = null;

    async function loadGraph() {
        const start = document.getElementById('startDateTime').value;
        const end = document.getElementById('endDateTime').value;
        const interval = document.getElementById('interval').value;

        if (!start || !end) {
            console.warn('Выберите даты');
            return;
        }

        if (new Date(start) >= new Date(end)) {
            console.warn('Дата начала должна быть раньше даты конца');
            return;
        }

        const url = `/api/data?start=${start}&end=${end}&interval=${interval}`;

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();

            const labels = data.map(x => new Date(x.timestamp).toLocaleString());
            const temperatures = data.map(x => x.temperature);
            const humidities = data.map(x => x.humidity);

            if (!chart) {
                chart = new Chart(document.getElementById('chart'), {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Температура (°C)',
                                data: temperatures,
                                borderColor: 'red',
                                fill: false
                            },
                            {
                                label: 'Влажность (%)',
                                data: humidities,
                                borderColor: 'blue',
                                fill: false
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        animation: false,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            } else {
                chart.data.labels = labels;
                chart.data.datasets[0].data = temperatures;
                chart.data.datasets[1].data = humidities;
                chart.update();
            }
        } catch (error) {
            console.error('Ошибка загрузки данных:', error);
        }
    }

    function toggleAutoUpdate() {
        const btn = document.getElementById('autoUpdateBtn');
        if (autoUpdateInterval) {
            clearInterval(autoUpdateInterval);
            autoUpdateInterval = null;
            btn.textContent = 'Включить автообновление';
        } else {
            autoUpdateInterval = setInterval(loadGraph, 2000);
            btn.textContent = 'Выключить автообновление';
            loadGraph();
        }
    }

    // Обработчики событий
    document.getElementById('startDateTime').addEventListener('change', loadGraph);
    document.getElementById('endDateTime').addEventListener('change', loadGraph);
    document.getElementById('interval').addEventListener('change', loadGraph);
    document.getElementById('autoUpdateBtn').addEventListener('click', toggleAutoUpdate);

    window.onload = loadGraph;
    window.onunload = () => {
        if (autoUpdateInterval) {
            clearInterval(autoUpdateInterval);
        }
    };
</script>